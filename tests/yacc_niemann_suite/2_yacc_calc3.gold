(grammar
    (definitions
        (def_proto_block
            "\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include \"calc3.h\"\n\n/* prototypes */\nnodeType *opr(int oper, int nops, ...);\nnodeType *id(int i);\nnodeType *con(int value);\nvoid freeNode(nodeType *p);\nint ex(nodeType *p);\nint yylex(void);\n\nvoid yyerror(char *s);\nint sym[26];                    /* symbol table */\n"
        )
        (definition
            union
            (union_block
                (union_members
                    (union_member
                        (union_terms
                            (union_term
                                "int"
                            )
                            (union_term
                                "iValue"
                            )
                        )
                    )
                    (union_member
                        (union_terms
                            (union_term
                                "char"
                            )
                            (union_term
                                "sIndex"
                            )
                        )
                    )
                    (union_member
                        (union_terms
                            (union_term
                                "nodeType"
                            )
                            (union_term
                                "nPtr"
                            )
                        )
                    )
                )
            )
        )
        (def_brace
            token
            iValue
            (def_symbols
                (def_symbol
                    INTEGER
                )
            )
        )
        (def_brace
            token
            sIndex
            (def_symbols
                (def_symbol
                    VARIABLE
                )
            )
        )
        (definition
            token
            (def_symbols
                (def_symbol
                    WHILE
                )
                (def_symbol
                    IF
                )
                (def_symbol
                    PRINT
                )
            )
        )
        (definition
            nonassoc
            (def_symbols
                (def_symbol
                    IFX
                )
            )
        )
        (definition
            nonassoc
            (def_symbols
                (def_symbol
                    ELSE
                )
            )
        )
        (definition
            left
            (def_symbols
                (def_symbol
                    GE
                )
                (def_symbol
                    LE
                )
                (def_symbol
                    EQ
                )
                (def_symbol
                    NE
                )
                (def_symbol
                    '>'
                )
                (def_symbol
                    '<'
                )
            )
        )
        (definition
            left
            (def_symbols
                (def_symbol
                    '+'
                )
                (def_symbol
                    '-'
                )
            )
        )
        (definition
            left
            (def_symbols
                (def_symbol
                    '*'
                )
                (def_symbol
                    '/'
                )
            )
        )
        (definition
            nonassoc
            (def_symbols
                (def_symbol
                    UMINUS
                )
            )
        )
        (def_brace
            type
            nPtr
            (def_symbols
                (def_symbol
                    stmt
                )
                (def_symbol
                    expr
                )
                (def_symbol
                    stmt_list
                )
            )
        )
    )
    (rules
        (rule
            program
            (rule_alts
                (rule_alt
                    (rule_terms
                        function
                    )
                    (rule_action_block
                        " exit(0); "
                    )
                )
            )
        )
        (rule
            function
            (rule_alts
                (rule_alt
                    (rule_terms
                        function
                        stmt
                    )
                    (rule_action_block
                        " ex($2); freeNode($2); "
                    )
                )
                (rule_alt
                    (NULL)

                )
            )
        )
        (rule
            stmt
            (rule_alts
                (rule_alt
                    (rule_terms
                        ';'
                    )
                    (rule_action_block
                        " $$ = opr(\';\', 2, NULL, NULL); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        ';'
                    )
                    (rule_action_block
                        " $$ = $1; "
                    )
                )
                (rule_alt
                    (rule_terms
                        PRINT
                        expr
                        ';'
                    )
                    (rule_action_block
                        " $$ = opr(PRINT, 1, $2); "
                    )
                )
                (rule_alt
                    (rule_terms
                        VARIABLE
                        '='
                        expr
                        ';'
                    )
                    (rule_action_block
                        " $$ = opr(\'=\', 2, id($1), $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        WHILE
                        '('
                        expr
                        ')'
                        stmt
                    )
                    (rule_action_block
                        " $$ = opr(WHILE, 2, $3, $5); "
                    )
                )
                (rule_alt
                    (rule_terms
                        IF
                        '('
                        expr
                        ')'
                        stmt
                        %prec
                        IFX
                    )
                    (rule_action_block
                        " $$ = opr(IF, 2, $3, $5); "
                    )
                )
                (rule_alt
                    (rule_terms
                        IF
                        '('
                        expr
                        ')'
                        stmt
                        ELSE
                        stmt
                    )
                    (rule_action_block
                        " $$ = opr(IF, 3, $3, $5, $7); "
                    )
                )
                (rule_alt
                    (rule_terms
                        '{'
                        stmt_list
                        '}'
                    )
                    (rule_action_block
                        " $$ = $2; "
                    )
                )
            )
        )
        (rule
            stmt_list
            (rule_alts
                (rule_alt
                    (rule_terms
                        stmt
                    )
                    (rule_action_block
                        " $$ = $1; "
                    )
                )
                (rule_alt
                    (rule_terms
                        stmt_list
                        stmt
                    )
                    (rule_action_block
                        " $$ = opr(\';\', 2, $1, $2); "
                    )
                )
            )
        )
        (rule
            expr
            (rule_alts
                (rule_alt
                    (rule_terms
                        INTEGER
                    )
                    (rule_action_block
                        " $$ = con($1); "
                    )
                )
                (rule_alt
                    (rule_terms
                        VARIABLE
                    )
                    (rule_action_block
                        " $$ = id($1); "
                    )
                )
                (rule_alt
                    (rule_terms
                        '-'
                        expr
                        %prec
                        UMINUS
                    )
                    (rule_action_block
                        " $$ = opr(UMINUS, 1, $2); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        '+'
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(\'+\', 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        '-'
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(\'-\', 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        '*'
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(\'*\', 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        '/'
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(\'/\', 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        '<'
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(\'<\', 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        '>'
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(\'>\', 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        GE
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(GE, 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        LE
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(LE, 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        NE
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(NE, 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        expr
                        EQ
                        expr
                    )
                    (rule_action_block
                        " $$ = opr(EQ, 2, $1, $3); "
                    )
                )
                (rule_alt
                    (rule_terms
                        '('
                        expr
                        ')'
                    )
                    (rule_action_block
                        " $$ = $2; "
                    )
                )
            )
        )
    )
    (code
        "\n\nnodeType *con(int value) {\n    nodeType *p;\n\n    /* allocate node */\n    if ((p = malloc(sizeof(nodeType))) == NULL)\n        yyerror(\"out of memory\");\n\n    /* copy information */\n    p->type = typeCon;\n    p->con.value = value;\n\n    return p;\n}\n\nnodeType *id(int i) {\n    nodeType *p;\n\n    /* allocate node */\n    if ((p = malloc(sizeof(nodeType))) == NULL)\n        yyerror(\"out of memory\");\n\n    /* copy information */\n    p->type = typeId;\n    p->id.i = i;\n\n    return p;\n}\n\nnodeType *opr(int oper, int nops, ...) {\n    va_list ap;\n    nodeType *p;\n    int i;\n\n    /* allocate node */\n    if ((p = malloc(sizeof(nodeType))) == NULL)\n        yyerror(\"out of memory\");\n    if ((p->opr.op = malloc(nops * sizeof(nodeType))) == NULL)\n        yyerror(\"out of memory\");\n\n    /* copy information */\n    p->type = typeOpr;\n    p->opr.oper = oper;\n    p->opr.nops = nops;\n    va_start(ap, nops);\n    for (i = 0; i < nops; i++)\n        p->opr.op[i] = va_arg(ap, nodeType*);\n    va_end(ap);\n    return p;\n}\n\nvoid freeNode(nodeType *p) {\n    int i;\n\n    if (!p) return;\n    if (p->type == typeOpr) {\n        for (i = 0; i < p->opr.nops; i++)\n            freeNode(p->opr.op[i]);\n        free (p->opr.op);\n    }\n    free (p);\n}\n\nvoid yyerror(char *s) {\n    fprintf(stdout, \"%s\\n\", s);\n}\n\nint main(void) {\n    yyparse();\n    return 0;\n}\n"
    )
)
