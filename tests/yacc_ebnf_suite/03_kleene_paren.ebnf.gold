%{
#include <tuple>
typedef std::tuple<int> program_paren_0_type_t;
    #include <stdio.h>
    int yylex(void);
    void yyerror(char *);
%}
%union 
{
	int iValue;
	program_paren_0_type_t* program_paren_0_type;
}
%token INTEGER
%token<iValue> program expr
%type<program_paren_0_type> program_paren_0

%%

program:
	  program_paren_0 '\n' {
                for(auto p = $1->begin(); p != $1->end(); p++)
                {
                    printf("%d\n", std::get<0>(*p));
                }
            };

program_paren_0:
	  expr { $$ = program_paren_0_type_t($1); { } };

expr:
	  INTEGER { $$ = $1; }
	| expr '+' expr { $$ = $1 + $3; }
	| expr '-' expr { $$ = $1 - $3; };

%%

int main(void) {
{
    yyparse();
    return 0;
}

