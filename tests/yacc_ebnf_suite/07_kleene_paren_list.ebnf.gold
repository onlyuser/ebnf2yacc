%{
	#include <vector>
	#include <tuple>
	typedef std::tuple<int, int, int> program_plus_term_0_type_t;
	typedef std::vector<program_plus_term_0_type_t> program_plus_recursive_0_type_t;
    #include <stdio.h>
    int yylex(void);
    void yyerror(char *);
%}
%union 
{
	int iValue;
	program_plus_term_0_type_t* program_plus_term_0_type;
	program_plus_recursive_0_type_t* program_plus_recursive_0_type;
}
%token INTEGER
%token<iValue> program expr qwe asd
%type<program_plus_term_0_type> program_plus_term_0
%type<program_plus_recursive_0_type> program_plus_recursive_0

%%

program:
	  program_plus_recursive_0 '\n' { {
                for(auto p = $1->begin(); p != $1->end(); p++)
                {
                    printf("%d\n", std::get<0>(*p));
                }
            } delete $1;};

program_plus_recursive_0:
	  program_plus_term_0 { $$ = new program_plus_recursive_0_type_t; $$->push_back(*$1); delete $1; }
	| program_plus_recursive_0 program_plus_term_0 { $1->push_back(*$2); delete $2; $$ = $1; };

program_plus_term_0:
	  expr qwe asd { $$ = program_plus_term_0_type_t($1, $2, $3); {} };

expr:
	  INTEGER { $$ = $1; }
	| expr '+' expr { $$ = $1 + $3; }
	| expr '-' expr { $$ = $1 - $3; };

%%

int main(void) {
{
    yyparse();
    return 0;
}

